rules:
- id: chrome-remote-interface-navigate-injection
  patterns:
  - pattern-inside: |
      ...
      require('chrome-remote-interface');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern: |
      $PAGE.navigate({url: $INPUT},...)
  - pattern-not: '$PAGE.navigate({url: "..."},...)'
  message: >
    If unverified user data can reach the `navigate` method it can result in Server-Side Request Forgery
    vulnerabilities
  languages:
  - javascript
  severity: WARNING
  metadata:
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
- id: chrome-remote-interface-setdocumentcontent-injection
  patterns:
  - pattern-inside: |
      ...
      require('chrome-remote-interface');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern: |
      $PAGE.setDocumentContent({html: $INPUT},...)
  - pattern-not: '$PAGE.setDocumentContent({html: "..."},...)'
  message: >
    If unverified user data can reach the `setDocumentContent` method it can result in Server-Side Request Forgery
    vulnerabilities
  languages:
  - javascript
  severity: WARNING
  metadata:
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
- id: chrome-remote-interface-evaluate-injection
  patterns:
  - pattern-inside: |
      ...
      require('chrome-remote-interface');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern: |
      $RUNTIME.evaluate({expression: $INPUT},...)
  - pattern-not: '$RUNTIME.evaluate({expression: "..."},...)'
  message: >
    If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery
    vulnerabilities
  languages:
  - javascript
  severity: WARNING
  metadata:
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
- id: chrome-remote-interface-compilescript-injection
  patterns:
  - pattern-inside: |
      ...
      require('chrome-remote-interface');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern: |
      $RUNTIME.compileScript({expression: $INPUT},...)
  - pattern-not: '$RUNTIME.compileScript({expression: "..."},...)'
  message: >
    If unverified user data can reach the `compileScript` method it can result in Server-Side Request Forgery
    vulnerabilities
  languages:
  - javascript
  severity: WARNING
  metadata:
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
- id: chrome-remote-interface-printtopdf-injection
  patterns:
  - pattern-inside: |
      ...
      require('chrome-remote-interface');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern-either:
    - pattern: |
        $RUNTIME.printToPDF({headerTemplate: $INPUT},...)
    - pattern: |
        $RUNTIME.printToPDF({footerTemplate: $INPUT},...)
  - pattern-not: |
      $RUNTIME.printToPDF({headerTemplate: "..."},...)
  - pattern-not: '$RUNTIME.printToPDF({footerTemplate: "..."},...)'
  message: >
    If unverified user data can reach the `printToPDF` method it can result in Server-Side Request Forgery
    vulnerabilities
  languages:
  - javascript
  severity: WARNING
  metadata:
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
